---
title: "Quarto World Bank Theme"
subtitle: "A minimalist theme for Quarto/Reveal.js presentations for the World Bank"
author: "[Bernhard Bieri](https://bernhardbieri.ch)"
institute: The World Bank
date: today
date-format: "dddd, [the] D[<sup style='font-size:65%;font-style:italic;'>th</sup>] [of] MMMM, YYYY"
format:
  worldbank-revealjs:
    logo: logo.png
    footer: "[World Bank](https://github.com/worldbank) theme for [Quarto Presentations](https://quarto.org/docs/presentations/revealjs/index.html). Code available on [GitHub](https://github.com/BBieri/quartoWBtheme)."
incremental: true
embed-resources: false
---

```{r}
#| include: false
# Add default ggplot theme. This can be overridden by your own theme at
# the end of the ggplot graph.
source("_extensions/worldbank/setup-ggplot2-worldbank.R")
```

## Quarto

Quarto enables you to weave together content and executable code into a finished presentation.
To learn more about Quarto presentations see <https://quarto.org/docs/presentations/>.

> This is part of the [Quarto documentation](https://quarto.org/docs/presentations/).

```{r}
library(tidyverse)
# Prepare data
cty_mpg <- aggregate(mpg$cty, by = list(mpg$manufacturer), FUN = mean)
colnames(cty_mpg) <- c("make", "mileage") # change column names
cty_mpg <- cty_mpg[order(cty_mpg$mileage), ] # sort
cty_mpg$make <- factor(cty_mpg$make, levels = cty_mpg$make)
# Plot
ggplot(cty_mpg, aes(x = make, y = mileage)) +
  geom_segment(aes(
    x = make,
    xend = make,
    y = 0,
    yend = mileage
  ), color = "black") +
  geom_point(size = 3, color = "blue") +
  labs(
    title = "Lollipop Chart",
    subtitle = "Make Vs Avg. Mileage",
    caption = "source: mpg"
  )
```


## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

> This is part of the [Quarto documentation](https://quarto.org/docs/presentations/).

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code.
You can embed code like this:

```{r}
#| echo: true
1 + 1
```

> This is part of the [Quarto documentation](https://quarto.org/docs/presentations/).

You can also add `text marked as code`!

# New topic! {background-color="#002244"}

To make a slide like this, use:

    # Title of slide {background-color="#002244"}

## Tabset example

::: panel-tabset
## Example 1

Content here for tabset 1 :)

## Example 2

More content here, for tabset 2 :)
:::

## Incremental content

Hi! 

. . .


Use `. . .` to separate content as an incremental slide!


## You can add R code

```{r}
#| echo: true
library(dplyr)
library(ggplot2)
g <- starwars |> 
  ggplot() +
  geom_point(aes(x = height, y = mass)) +
  theme_light()
```

## And show the results aswell :)

```{r}
#| fig.align: center
#| echo: true
g 
```

## What about tables? {.smaller}

### `knitr::kable()`

::: columns
::: {.column width="50%"}
```{r}
#| label: kable-ex
#| echo: true
#| eval: false
tab <- starwars |>
  tidyr::drop_na(species) |> 
  group_by(species) |>
  summarise(
    n = n(),
    mean_heigth = round(mean(height, na.rm = TRUE)),
    mean_mass = round(mean(mass, na.rm = TRUE))
  ) |> 
  slice_max(order_by = n, n = 4) 

knitr::kable(tab)
```
:::

::: {.column width="50%"}
```{r}
#| label: kable-ex
#| eval: true
```
:::
:::

## `DT::datatable()` {.smaller}

With the `smaller` class in the slide!
Ex: `## slide name {.smaller}`

```{r}
DT::datatable(tab, options = list(pageLength = 5))
```

## `gt::gt()`

```{r}
gt::gt(tab)
```

## `reactable::reactable()`

```{r}
reactable::reactable(tab)
```

## Diagrams with Mermaid!

Read about how to create a diagram in this [post by Mine Ã‡etinkaya-Rundel](https://mine-cetinkaya-rundel.github.io/quarto-tip-a-day/posts/21-diagrams/).

<center>
<blockquote class="twitter-tweet" data-conversation="none"><p lang="en" dir="ltr"><a href="https://twitter.com/hashtag/quartotip?src=hash&amp;ref_src=twsrc%5Etfw">#quartotip</a> 21: Create diagrams in Quarto documents using Mermaid or Graphviz in executable code cells, similar to how you create figures.<br><br>Read more: <a href="https://t.co/3qx9oSNCay">https://t.co/3qx9oSNCay</a> <a href="https://t.co/fYzGcISl4h">pic.twitter.com/fYzGcISl4h</a></p>&mdash; Quarto (@quarto_pub) <a href="https://twitter.com/quarto_pub/status/1549271325943947270?ref_src=twsrc%5Etfw">July 19, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
</center>


## Exporting into PDF

You can use the function `pagedown::chrome_print()` to print the HTML version into a PDF!

```r
pagedown::chrome_print("path-to-file.html")
```